{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# üßÉ Juice Factory Product Mix Optimization using PuLP\n",
    "\n",
    "This notebook solves a realistic product mix optimization problem for a juice factory using linear programming (LP) via the `PuLP` library in Python.\n",
    "\n",
    "It includes:\n",
    "- Business scenario setup\n",
    "- Excel-based input (optional)\n",
    "- LP model\n",
    "- Optimization\n",
    "- Visualization\n",
    "- Sensitivity analysis\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from pulp import LpMaximize, LpProblem, LpVariable, LpStatus, value\n",
    "import matplotlib.pyplot as plt\n",
    "import os"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## üìä Step 1: Load Data from Excel (optional)\n",
    "\n",
    "If you want to load product data from Excel instead of hardcoding it, place `juice_data.xlsx` in the same directory."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Profit</th>\n",
       "      <th>MachineTime</th>\n",
       "      <th>LaborTime</th>\n",
       "      <th>MaxUnits</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Product</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Apple Juice</th>\n",
       "      <td>25</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Orange Juice</th>\n",
       "      <td>30</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mixed Fruit Juice</th>\n",
       "      <td>40</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Profit  MachineTime  LaborTime  MaxUnits\n",
       "Product                                                    \n",
       "Apple Juice            25            3          2        60\n",
       "Orange Juice           30            2          3        60\n",
       "Mixed Fruit Juice      40            4          4        60"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Simulating Excel import - use actual Excel in real scenario\n",
    "data = pd.read_excel(\"juice_data.xlsx\")\n",
    "data.set_index(\"Product\", inplace=True)\n",
    "data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## üß† Step 2: Define LP Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Available resources\n",
    "max_machine_time = 240\n",
    "max_labor_time = 220\n",
    "\n",
    "# Define model\n",
    "model = LpProblem(\"Juice_Product_Mix\", LpMaximize)\n",
    "\n",
    "# Decision variables\n",
    "juice_vars = {product: LpVariable(product.replace(' ', '_'), lowBound=0, upBound=data.loc[product, 'MaxUnits'], cat='Integer')\n",
    "              for product in data.index}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## üéØ Step 3: Objective Function - Maximize Profit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "model += sum(data.loc[p, 'Profit'] * juice_vars[p] for p in data.index), \"Total_Profit\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## üìè Step 4: Constraints"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Machine time constraint\n",
    "model += sum(data.loc[p, 'MachineTime'] * juice_vars[p] for p in data.index) <= max_machine_time, \"Machine_Time\"\n",
    "# Labor time constraint\n",
    "model += sum(data.loc[p, 'LaborTime'] * juice_vars[p] for p in data.index) <= max_labor_time, \"Labor_Time\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## üßÆ Step 5: Solve Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Status: Optimal\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'Apple Juice': 56.0,\n",
       " 'Orange Juice': 36.0,\n",
       " 'Mixed Fruit Juice': 0.0,\n",
       " 'Total Profit': 2480.0}"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.solve()\n",
    "print(f\"Status: {LpStatus[model.status]}\")\n",
    "\n",
    "# Extract values\n",
    "results = {p: juice_vars[p].value() for p in data.index}\n",
    "results['Total Profit'] = value(model.objective)\n",
    "results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## üìä Step 6: Visualization of Optimal Mix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.bar(list(results.keys())[:-1], list(results.values())[:-1], color=['red', 'orange', 'purple'])\n",
    "\n",
    "plt.title(\"Optimal Juice Production Mix\")\n",
    "plt.ylabel(\"Units to Produce\")\n",
    "plt.grid(axis='y', linestyle='--', alpha=0.6)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## üîç Step 7: Basic Sensitivity Analysis\n",
    "Let‚Äôs test what happens if we increase available **machine time** by 20 hours."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Apple Juice': 60.0,\n",
       " 'Orange Juice': 32.0,\n",
       " 'Mixed Fruit Juice': 1.0,\n",
       " 'Total Profit': 2500.0}"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Adjust constraint\n",
    "model.constraints[\"Machine_Time\"].changeRHS(max_machine_time + 20)\n",
    "\n",
    "# Re-solve\n",
    "model.solve()\n",
    "sensitivity_results = {p: juice_vars[p].value() for p in data.index}\n",
    "sensitivity_results['Total Profit'] = value(model.objective)\n",
    "sensitivity_results"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
